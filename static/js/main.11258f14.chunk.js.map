{"version":3,"sources":["SudokuGrid.js","SudokuBot.js","serviceWorker.js","index.js"],"names":["SudokuGrid","props","gridArray","grid","i","push","slice","colorArray","className","map","row","key","cell","j","type","onChange","event","editGrid","target","value","style","backgroundColor","SudokuBot","useState","Array","fill","setGridArray","useCallback","index","editedGridArray","showError","isSafe","sudoku","col","val","r","parseInt","Math","sqrt","c","borderRadius","background","onClick","solveSudoku","emptyBoxFound","join","split","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.11258f14.chunk.js","sourcesContent":["import React, {  } from 'react';\r\n\r\nfunction SudokuGrid(props){\r\n\r\n\tconst { gridArray } = props;\r\n\tlet grid = [];\r\n\tfor(let i=0;i<9;i++){\r\n\t\tgrid.push(gridArray.slice(i*9,(i+1)*9));\r\n\t}\r\n\r\n\tconst colorArray = ['#f7bbb7', '#f7bbb7', '#f7bbb7', '#d8f7b7', '#d8f7b7' , '#d8f7b7' , '#93bded', '#93bded', '#93bded',\r\n\t\t\t\t\t\t'#f7bbb7', '#f7bbb7', '#f7bbb7', '#d8f7b7' , '#d8f7b7', '#d8f7b7', '#93bded', '#93bded', '#93bded',\r\n\t\t\t\t\t\t'#f7bbb7', '#f7bbb7', '#f7bbb7', '#d8f7b7', '#d8f7b7', '#d8f7b7', '#93bded', '#93bded', '#93bded',\r\n\t\t\t\t\t\t'#e5a2f2', '#e5a2f2', '#e5a2f2', '#f2c9f2', '#f2c9f2', '#f2c9f2', '#ffa64d', '#ffa64d', '#ffa64d',\r\n\t\t\t\t\t\t'#e5a2f2', '#e5a2f2', '#e5a2f2', '#f2c9f2', '#f2c9f2', '#f2c9f2', '#ffa64d', '#ffa64d', '#ffa64d', \r\n\t\t\t\t\t\t'#e5a2f2', '#e5a2f2', '#e5a2f2', '#f2c9f2', '#f2c9f2', '#f2c9f2', '#ffa64d', '#ffa64d', '#ffa64d',\r\n\t\t\t\t\t\t'#e085c2', '#e085c2', '#e085c2', '#79d279', '#79d279', '#79d279', '#ff3333', '#ff3333', '#ff3333',\r\n\t\t\t\t\t\t'#e085c2', '#e085c2', '#e085c2', '#79d279', '#79d279', '#79d279', '#ff3333', '#ff3333', '#ff3333',\r\n\t\t\t\t\t\t'#e085c2', '#e085c2', '#e085c2', '#79d279', '#79d279', '#79d279', '#ff3333', '#ff3333', '#ff3333']\r\n\treturn (\r\n\t\t<div className=\"sudoku-grid\">\r\n\t\t{\r\n\t\t\tgrid.map((row,i)=>{\r\n\t\t\t\treturn <div key={\"row\"+i} className=\"row\">\r\n\t\t\t\t{\r\n\t\t\t\t\trow.map((cell,j)=>{\r\n\t\t\t\t\t\treturn <input \r\n\t\t\t\t\t\t\tkey={\"cell\"+j+\"of row\"+i}\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\tonChange={(event)=>props.editGrid(event.target.value,i*9+j)}\r\n\t\t\t\t\t\t\tclassName=\"cell\" \r\n\t\t\t\t\t\t\tvalue={gridArray[i*9+j]} \r\n\t\t\t\t\t\t\tstyle={{backgroundColor:colorArray[i*9+j]}}/>\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t})\r\n\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SudokuGrid;","import React,{ useState, useCallback }from 'react';\nimport './SudokuBot.css';\nimport SudokuGrid from './SudokuGrid.js';\nfunction SudokuBot() {\n\n\n  const [ gridArray, setGridArray ] = useState(Array(81).fill(\"\"));\n\n  const editGrid = useCallback((value, index)=>{\n    let editedGridArray = [...gridArray];\n    editedGridArray[index]=value;\n    setGridArray(editedGridArray);\n  })\n\n  let error=\" BAD SUDOKU!!! \",showError=false;\n  \n  function solveSudokuUtil(){\n    let sudoku = [];\n    for(let i=0;i<10;i++){\n      sudoku.push(gridArray.slice(i*9,(i+1)*9));\n    }\n\n    if(solveSudoku(sudoku)){\n      setGridArray(sudoku.join().split(','));\n      showError=false;\n    }\n    else{\n      showError = true;\n    }\n  }\n\n  function solveSudoku(sudoku){\n    if(!sudoku)\n      return;\n\n    let row,col,emptyBoxFound=0;\n    const N=9;\n    for(row=0;row<N;row++)\n    {\n      for(col=0;col<N;col++)\n      {\n        if(sudoku[row][col]==\"\")\n        {\n          emptyBoxFound=1;\n          break;\n        }\n      }\n      if(emptyBoxFound==1)\n        break;\n    }\n\n    if(emptyBoxFound==0)\n      return true;\n\n    for(let val=1;val<=N;val++)\n    {\n      if(isSafe(sudoku,row,col,val))\n      {\n        sudoku[row][col]=val;\n        if(solveSudoku(sudoku))\n          return true;\n\n        sudoku[row][col]=\"\";\n      }\n    }\n    return false;\n  }\n\n  function isSafe(sudoku,row,col,val){\n    let i,j;\n    let N=9;\n    //Check if column and row is safe\n    for(i=0;i<N;i++){\n      if(sudoku[i][col]==val)\n        return false;\n      if(sudoku[row][i]==val)\n        return false;\n    }\n    //Check if box is safe\n    let r = row - row%(parseInt(Math.sqrt(N)));\n    let c = col - col%(parseInt(Math.sqrt(N)));\n    for(i=0;i<(parseInt(Math.sqrt(N)));i++)\n    {\n      for(j=0;j<(parseInt(Math.sqrt(N)));j++)\n      {\n        if(sudoku[i+r][j+c]==val)\n          return false;\n      }\n    }\n    return true;\n  }\n\n  function clearGrid(){\n    setGridArray(Array(81).fill(\"\"));\n  }\n\n  return (\n    <div className=\"root\">\n      <div>\n        <h1>Sudoku Bot</h1>\n        <div className='error-container'>\n          {showError && error}\n        </div>\n      </div>\n      <div className=\"grid-container\">\n        <SudokuGrid gridArray={gridArray} editGrid={editGrid} />\n      </div>\n      <div className='button-container'>\n        <input className=\"button\" style={{borderRadius:'5px', background: '#4caf50'}} type='button' value='Solve' onClick={solveSudokuUtil}/>\n        <input className=\"button\" style={{borderRadius:'5px', background: '#008cba'}} type='button' value='Clear' onClick={clearGrid}/>\n      </div>\n    </div>\n  );\n}\n\nexport default SudokuBot;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SudokuBot from './SudokuBot';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <SudokuBot />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}